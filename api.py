from aiohttp import web
from datetime import datetime, timedelta
from bson import ObjectId
from db_connect import (
    sinhvien_col, thietbi_col, caidat_col, diemdanh_col, dangnhap_col,
    get_all, get_by_id, insert_one, update_one, delete_one
)

routes = web.RouteTableDef()

# ===============================
# üîπ 1. SINH VI√äN
# ===============================

@routes.get("/sinhvien")
async def get_all_sinhvien(request):
    data = await get_all(sinhvien_col)
    return web.json_response(data)

@routes.get("/sinhvien/{id}")
async def get_sinhvien_by_id(request):
    id = request.match_info["id"]
    sv = await get_by_id(sinhvien_col, id)
    if not sv:
        return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y"}, status=404)
    return web.json_response(sv)

@routes.post("/sinhvien")
async def add_sinhvien(request):
    data = await request.json()
    ten = data.get("Ten")
    mssv = data.get("MSSV")

    if not ten or not mssv:
        return web.json_response({"message": "Thi·∫øu th√¥ng tin t√™n ho·∫∑c MSSV"}, status=400)

    existing = await sinhvien_col.find_one({"MSSV": mssv})
    if existing:
        return web.json_response({"message": f"MSSV '{mssv}' ƒë√£ t·ªìn t·∫°i"}, status=409)

    sinhvien = {"Ten": ten, "MSSV": mssv, "Is_active": True}
    await insert_one(sinhvien_col, sinhvien)
    return web.json_response({"message": "Th√™m sinh vi√™n th√†nh c√¥ng"}, status=201)

@routes.put("/sinhvien/{id}")
async def update_sinhvien(request):
    id = request.match_info["id"]
    data = await request.json()
    await update_one(sinhvien_col, id, data)
    return web.json_response({"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng"})

@routes.delete("/sinhvien/{id}")
async def delete_sinhvien(request):
    id = request.match_info["id"]
    await delete_one(sinhvien_col, id)
    return web.json_response({"message": "X√≥a th√†nh c√¥ng"})


# ===============================
# üîπ 2. THI·∫æT B·ªä
# ===============================
@routes.post("/thietbi")
async def add_thietbi(request):
    data = await request.json()
    sinhvien_id = data.get("SinhVien_id")
    mac = data.get("MAC")
    ten_tb = data.get("Ten_ThietBi")

    if not sinhvien_id or not mac or not ten_tb:
        return web.json_response({"message": "Thi·∫øu d·ªØ li·ªáu!"}, status=400)

    try:
        sv_obj_id = ObjectId(sinhvien_id)
    except:
        return web.json_response({"message": "SinhVien_id kh√¥ng h·ª£p l·ªá!"}, status=400)

    sinhvien = await sinhvien_col.find_one({"_id": sv_obj_id})
    if not sinhvien:
        return web.json_response({"message": "Kh√¥ng t·ªìn t·∫°i sinh vi√™n!"}, status=404)

    existing_mac = await thietbi_col.find_one({"MAC": mac})
    if existing_mac:
        return web.json_response({"message": f"MAC '{mac}' ƒë√£ t·ªìn t·∫°i!"}, status=409)

    # T·∫Øt c√°c thi·∫øt b·ªã c≈©
    await thietbi_col.update_many({"SinhVien_id": sv_obj_id}, {"$set": {"Is_active": False}})

    new_tb = {
        "SinhVien_id": sv_obj_id,
        "MAC": mac,
        "TD_Them_ThietBi": datetime.now(),
        "Ten_ThietBi": ten_tb,
        "Is_active": True
    }
    await insert_one(thietbi_col, new_tb)
    return web.json_response({"message": "Th√™m thi·∫øt b·ªã th√†nh c√¥ng!"}, status=201)


@routes.get("/thietbi")
async def get_all_thietbi(request):
    data = await get_all(thietbi_col)
    return web.json_response(data)

@routes.get("/thietbi/{id}")
async def get_thietbi(request):
    id = request.match_info["id"]
    tb = await get_by_id(thietbi_col, id)
    if tb:
        return web.json_response(tb)
    return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã!"}, status=404)


@routes.put("/thietbi/{id}")
async def update_thietbi(request):
    id = request.match_info["id"]
    data = await request.json()

    tb = await thietbi_col.find_one({"_id": ObjectId(id)})
    if not tb:
        return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã!"}, status=404)

    if "SinhVien_id" in data:
        return web.json_response({"message": "Kh√¥ng ƒë∆∞·ª£c ph√©p thay ƒë·ªïi SinhVien_id!"}, status=400)

    sinhvien_id = tb["SinhVien_id"]
    await thietbi_col.update_many({"SinhVien_id": sinhvien_id, "_id": {"$ne": ObjectId(id)}},
                                  {"$set": {"Is_active": False}})

    data["TD_Them_ThietBi"] = datetime.now()
    data["Is_active"] = True

    await update_one(thietbi_col, id, data)
    return web.json_response({"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng!"})


@routes.delete("/thietbi/{id}")
async def delete_thietbi(request):
    id = request.match_info["id"]
    tb = await thietbi_col.find_one({"_id": ObjectId(id)})
    if not tb:
        return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y thi·∫øt b·ªã!"}, status=404)

    sinhvien_id = tb["SinhVien_id"]
    await delete_one(thietbi_col, id)

    latest = await thietbi_col.find_one({"SinhVien_id": sinhvien_id}, sort=[("TD_Them_ThietBi", -1)])
    if latest:
        await thietbi_col.update_one({"_id": latest["_id"]}, {"$set": {"Is_active": True}})

    return web.json_response({"message": "X√≥a thi·∫øt b·ªã th√†nh c√¥ng!"})



# ===============================
# üîπ 3. C√ÄI ƒê·∫∂T
# ===============================
@routes.post("/caidat")
async def add_caidat(request):
    data = await request.json()
    buoi = data.get("Buoi")
    if not buoi:
        return web.json_response({"message": "Thi·∫øu th√¥ng tin Bu·ªïi!"}, status=400)

    # T·∫Øt c·∫•u h√¨nh c≈© c√πng bu·ªïi
    await caidat_col.update_many({"Buoi": buoi}, {"$set": {"Is_active": False}})

    new_cd = {
        "Buoi": buoi,
        "TD_BatDau": data.get("TD_BatDau"),
        "TD_KetThuc": data.get("TD_KetThuc"),
        "TD_Reset": data.get("TD_Reset"),
        "Mail": data.get("Mail"),
        "TG_DiTre": data.get("TG_DiTre"),
        "TD_Setting": datetime.now(),
        "Is_active": True
    }
    await insert_one(caidat_col, new_cd)
    return web.json_response({"message": "Th√™m c√†i ƒë·∫∑t th√†nh c√¥ng!"}, status=201)


@routes.get("/caidat")
async def get_all_caidat(request):
    data = await get_all(caidat_col)
    return web.json_response(data)


@routes.get("/caidat/{id}")
async def get_caidat(request):
    id = request.match_info["id"]
    cd = await get_by_id(caidat_col, id)
    if cd:
        return web.json_response(cd)
    return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y c√†i ƒë·∫∑t!"}, status=404)


@routes.put("/caidat/{id}")
async def update_caidat(request):
    id = request.match_info["id"]
    data = await request.json()
    await update_one(caidat_col, id, data)
    return web.json_response({"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng!"})


@routes.delete("/caidat/{id}")
async def delete_caidat(request):
    id = request.match_info["id"]
    await delete_one(caidat_col, id)
    return web.json_response({"message": "X√≥a th√†nh c√¥ng!"})

# ===============================
# üîπ 4. ƒêI·ªÇM DANH
# ===============================
def xac_dinh_buoi():
    hour = datetime.now().hour
    if hour < 12:
        return "S√°ng"
    elif hour < 15:
        return "Chi·ªÅu"
    else:
        return "T·ªëi"

@routes.post("/diemdanh")
async def diemdanh(request):
    data = await request.json()
    mac = data.get("MAC")

    if not mac:
        return web.json_response({"message": "Thi·∫øu ƒë·ªãa ch·ªâ MAC!"}, status=400)

    # L·∫•y thi·∫øt b·ªã theo MAC
    thietbi = await thietbi_col.find_one({"MAC": mac})
    if not thietbi:
        # Thi·∫øt b·ªã kh√°ch (ch∆∞a ƒëƒÉng k√Ω)
        return web.json_response({"message": "Thi·∫øt b·ªã kh√°ch - ch∆∞a ƒëƒÉng k√Ω trong h·ªá th·ªëng!", "Ten_SinhVien": "Kh√°ch"}, status=403)

    # Ki·ªÉm tra tr·∫°ng th√°i thi·∫øt b·ªã
    if not thietbi.get("Is_active", False):
        return web.json_response({"message": "Thi·∫øt b·ªã ƒë√£ b·ªã v√¥ hi·ªáu h√≥a!"}, status=403)

    # L·∫•y th√¥ng tin sinh vi√™n
    sinhvien = await sinhvien_col.find_one({"_id": thietbi["SinhVien_id"]})
    ten_sv = sinhvien["Ten"] if sinhvien else "Kh√°ch"

    # X√°c ƒë·ªãnh bu·ªïi hi·ªán t·∫°i v√† l·∫•y c·∫•u h√¨nh ƒëang active cho bu·ªïi ƒë√≥
    buoi = xac_dinh_buoi()
    caidat = await caidat_col.find_one({"Buoi": buoi, "Is_active": True})
    if not caidat:
        return web.json_response({"message": f"Kh√¥ng c√≥ c√†i ƒë·∫∑t cho bu·ªïi {buoi}!"}, status=404)

    # Chuy·ªÉn c√°c m·ªëc th·ªùi gian t·ª´ c·∫•u h√¨nh
    try:
        TD_BatDau = datetime.combine(datetime.today(), datetime.strptime(caidat["TD_BatDau"], "%H:%M").time())
        TD_KetThuc = datetime.combine(datetime.today(), datetime.strptime(caidat["TD_KetThuc"], "%H:%M").time())
    except Exception:
        # N·∫øu d·ªØ li·ªáu th·ªùi gian kh√¥ng h·ª£p l·ªá
        return web.json_response({"message": "D·ªØ li·ªáu th·ªùi gian trong c√†i ƒë·∫∑t kh√¥ng h·ª£p l·ªá!"}, status=500)

    TG_DiTre = timedelta(minutes=int(caidat.get("TG_DiTre", 0))) if caidat.get("TG_DiTre") is not None else timedelta(minutes=0)
    now = datetime.now()

    # T√¨m b·∫£n ghi ƒëi·ªÉm danh c√πng MAC + Bu·ªïi trong ng√†y h√¥m nay (TD_Vao >= ng√†y h√¥m nay 00:00)
    today = datetime.now().date()
    start_of_today = datetime(today.year, today.month, today.day)
    record = await diemdanh_col.find_one({
        "MAC": mac,
        "Buoi": buoi,
        "TD_Vao": {"$gte": start_of_today}
    })
    # N·∫øu ch∆∞a c√≥ b·∫£n ghi ‚Üí t·∫°o m·ªõi (ghi gi·ªù v√†o + gi·ªù ra = gi·ªù hi·ªán t·∫°i)
    if not record:
        TD_Vao = now
        TD_Ra = now
        if TD_Vao <= TD_BatDau:
            trangthai = "C√≥ m·∫∑t"
        elif TD_Vao <= (TD_BatDau + TG_DiTre):
            trangthai = "ƒêi tr·ªÖ"
        else:
            trangthai = "V·∫Øng"
        new_record = {
            "TD_Vao": TD_Vao,
            "TD_Ra": TD_Ra,
            "Buoi": buoi,
            "MAC": mac,
            "Ten_SinhVien": ten_sv,
            "TrangThai": trangthai
        }
        await insert_one(diemdanh_col, new_record)
        return web.json_response({
            "Ten_SinhVien": ten_sv,
            "TrangThai": trangthai,
            "Buoi": buoi
        }, status=201)

    # N·∫øu ƒë√£ c√≥ b·∫£n ghi ‚Üí c·∫≠p nh·∫≠t gi·ªù ra
    else:
        TD_Ra = now
        trangthai = record.get("TrangThai", "")
        # N·∫øu kh√¥ng v·∫Øng ‚Üí ki·ªÉm tra v·ªÅ s·ªõm
        if trangthai != "V·∫Øng" and TD_Ra < TD_KetThuc:
            trangthai = f"{trangthai} - V·ªÅ s·ªõm"
        await diemdanh_col.update_one(
            {"_id": record["_id"]},
            {"$set": {"TD_Ra": TD_Ra, "TrangThai": trangthai}}
        )
        return web.json_response({
            "message": f"ƒê√£ c·∫≠p nh·∫≠t gi·ªù ra (bu·ªïi {buoi})!",
            "Ten_SinhVien": ten_sv,
            "TrangThai": trangthai,
            "Buoi": buoi
        }, status=200)

@routes.get("/diemdanh")
async def get_all_diemdanh(request):
    data = await get_all(diemdanh_col)
    return web.json_response(data)

@routes.get("/diemdanh/{id}")
async def get_diemdanh(request):
    id = request.match_info["id"]
    dd = await get_by_id(diemdanh_col, id)
    if dd:
        return web.json_response(dd)
    return web.json_response({"error": "Kh√¥ng t√¨m th·∫•y"}, status=404)

@routes.put("/diemdanh/{id}")
async def update_diemdanh(request):
    id = request.match_info["id"]
    data = await request.json()
    await update_one(diemdanh_col, id, data)
    return web.json_response({"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng!"})

@routes.delete("/diemdanh/{id}")
async def delete_diemdanh(request):
    id = request.match_info["id"]
    await delete_one(diemdanh_col, id)
    return web.json_response({"message": "X√≥a th√†nh c√¥ng!"})

# ===============================
# üîπ 5. ƒêƒÇNG NH·∫¨P
# ===============================
@routes.post("/dangnhap")
async def add_user(request):
    data = await request.json()
    username = data.get("username")
    password = data.get("password")

    if not username or not password:
        return web.json_response({"message": "Vui l√≤ng nh·∫≠p username v√† password!"}, status=400)

    exist = await dangnhap_col.find_one({"username": username})
    if exist:
        return web.json_response({"message": "Username ƒë√£ t·ªìn t·∫°i!"}, status=409)

    user = {
        "username": username,
        "password": password,
        "Is_active": True
    }
    await insert_one(dangnhap_col, user)
    return web.json_response({"message": "T·∫°o t√†i kho·∫£n th√†nh c√¥ng!"}, status=201)
@routes.get("/dangnhap")
async def get_all_user(request):
    users = await get_all(dangnhap_col)
    return web.json_response(users)
@routes.get("/dangnhap/{id}")
async def get_user(request):
    id = request.match_info["id"]
    user = await get_by_id(dangnhap_col, id)
    if user:
        return web.json_response(user)
    return web.json_response({"message": "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng!"}, status=404)
@routes.put("/dangnhap/{id}")
async def update_user(request):
    id = request.match_info["id"]
    data = await request.json()
    await update_one(dangnhap_col, id, data)
    return web.json_response({"message": "C·∫≠p nh·∫≠t th√†nh c√¥ng!"})
@routes.delete("/dangnhap/{id}")
async def delete_user(request):
    id = request.match_info["id"]
    await delete_one(dangnhap_col, id)
    return web.json_response({"message": "X√≥a th√†nh c√¥ng!"})